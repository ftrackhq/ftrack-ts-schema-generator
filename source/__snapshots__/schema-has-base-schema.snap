// :copyright: Copyright (c) 2023 ftrack
// Generated on 2023-02-01T00:00:00.000Z using schema
// from an instance running version 4.13.8 using server on https://ftrack.example.com
// Not intended to modify manually
export interface TypedContextForSubtype<K extends TypedContextSubtype> {
  __entity_type__?: K;
  __permissions?: Record<string, any>;
}
export interface SomeInterfaceName
  extends Omit<SomeBaseSchema, "__entity_type__" | "__permissions"> {
  __entity_type__?: "SomeInterfaceName";
  __permissions?: Record<string, any>;
}
export interface SomeBaseSchema {
  __entity_type__?: "SomeBaseSchema";
  __permissions?: Record<string, any>;
}
export interface BasicLink {
  id: string;
  type: string;
  name: string;
}

export interface EntityTypeMap {
  TypedContext: TypedContext;
  SomeInterfaceName: SomeInterfaceName;
  SomeBaseSchema: SomeBaseSchema;
}

export type EntityType = keyof EntityTypeMap;
export type EntityData<TEntityType extends EntityType = EntityType> =
  EntityTypeMap[TEntityType];

export interface TypedContextSubtypeMap {}
export type TypedContextSubtype = keyof TypedContextSubtypeMap;

export type TypedContext = TypedContextSubtypeMap[TypedContextSubtype];

export function getAttributeConfigurations() {
  return [] as const;
}

export type RuntimeCustomAttributeConfiguration = ReturnType<
  typeof getAttributeConfigurations
>[number];
export type RuntimeCustomAttributeConfigurationName =
  RuntimeCustomAttributeConfiguration["name"];
export type RuntimeCustomAttributeConfigurationLabel =
  RuntimeCustomAttributeConfiguration["label"];

type BaseCustomAttributeValue = Omit<
  ContextCustomAttributeValue,
  "key" | "value"
>;

export interface TypedCustomAttributeValueMap {}

export type TypedCustomAttributeValue<
  K extends keyof TypedCustomAttributeValueMap
> = BaseCustomAttributeValue & {
  key: K;
  value: TypedCustomAttributeValueMap[K];
};

export type TypedContextCustomAttributesMap = {
  TypedContext: never;
  SomeInterfaceName: never;
  SomeBaseSchema: never;
};

export function getTypes() {
  return [] as const;
}

export type RuntimeType = ReturnType<typeof getTypes>[number];
export type RuntimeTypeName = RuntimeType["name"];

interface TypeFor<T extends TypedContextSubtype> extends Omit<Type, "name"> {
  name: T;
}

export function getObjectTypes() {
  return [] as const;
}

export type RuntimeObjectType = ReturnType<typeof getObjectTypes>[number];
export type RuntimeObjectTypeName = RuntimeObjectType["name"];

interface ObjectTypeFor<T extends TypedContextSubtype>
  extends Omit<ObjectType, "name"> {
  name: T;
}

export function getProjectSchemas() {
  return [] as const;
}

export type RuntimeProjectSchema = ReturnType<typeof getProjectSchemas>[number];
export type RuntimeProjectSchemaName = RuntimeProjectSchema["name"];

export function getPriorities() {
  return [] as const;
}

export type RuntimePriority = ReturnType<typeof getPriorities>[number];
export type RuntimePriorityName = RuntimePriority["name"];

export function getStatuses() {
  return [] as const;
}

export type RuntimeStatus = ReturnType<typeof getStatuses>[number];
export type RuntimeStatusName = RuntimeStatus["name"];
