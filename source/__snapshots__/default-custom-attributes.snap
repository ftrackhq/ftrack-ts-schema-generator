// :copyright: Copyright (c) 2023 ftrack

// Generated on 2023-02-01T00:00:00.000Z using schema
// from an instance running version 4.13.8 using server on https://ftrack.example.com
// Not intended to modify manually

export interface TypedContext<
  K extends TypedContextSubtype = TypedContextSubtype
> {
  __entity_type__?: K;
  __permissions?: Record<string, any>;
}
export interface BasicLink {
  id: string;
  type: string;
  name: string;
}
declare module "@ftrack/api" {
  export interface EntityTypeMap {
    TypedContext: TypedContext;
  }
}
export interface TypedContextSubtypeMap {
  TypedContext: TypedContext;
}
export type TypedContextSubtype = keyof TypedContextSubtypeMap;
export function getAttributeConfigurations() {
  return [
    {
      name: "fend",
      label: "Frame end",
      entityType: "task",
      default: 1,
      objectType: "Shot",
      isHierarchical: false,
    },
    {
      name: "handles",
      label: "Frame handles",
      entityType: "task",
      default: 0,
      objectType: "Shot",
      isHierarchical: false,
    },
    {
      name: "duration",
      label: "Frame duration",
      entityType: "task",
      default: "{self.fend - self.fstart + 1}",
      objectType: "Shot",
      isHierarchical: false,
    },
    {
      name: "fstart",
      label: "Frame start",
      entityType: "task",
      default: 1,
      objectType: "Shot",
      isHierarchical: false,
    },
    {
      name: "fps",
      label: "fps",
      entityType: "show",
      default: 24,
      objectType: undefined,
      isHierarchical: false,
    },
    {
      name: "fps",
      label: "fps",
      entityType: "task",
      default: 25,
      objectType: "Sequence",
      isHierarchical: false,
    },
    {
      name: "fps",
      label: "fps",
      entityType: "task",
      default: 25,
      objectType: "Shot",
      isHierarchical: false,
    },
  ] as const;
}

export type RuntimeCustomAttributeConfiguration = ReturnType<
  typeof getAttributeConfigurations
>[number];
export type RuntimeCustomAttributeConfigurationName =
  RuntimeCustomAttributeConfiguration["name"];
export type RuntimeCustomAttributeConfigurationLabel =
  RuntimeCustomAttributeConfiguration["label"];

export function getTypes() {
  return [] as const;
}

export type RuntimeType = ReturnType<typeof getTypes>[number];
export type RuntimeTypeName = RuntimeType["name"];

export function getObjectTypes() {
  return [] as const;
}

export type RuntimeObjectType = ReturnType<typeof getObjectTypes>[number];
export type RuntimeObjectTypeName = RuntimeObjectType["name"];

export function getProjectSchemas() {
  return [] as const;
}

export type RuntimeProjectSchema = ReturnType<typeof getProjectSchemas>[number];
export type RuntimeProjectSchemaName = RuntimeProjectSchema["name"];

// Errors:
