// :copyright: Copyright (c) 2023 ftrack

// Generated on 2023-02-01T00:00:00.000Z using schema
// from an instance running version 4.13.8 using server on https://ftrack.example.com
// Not intended to modify manually

export interface TypedContext<
  K extends TypedContextSubtype = TypedContextSubtype
> {
  __entity_type__?: K;
  __permissions?: Record<string, any>;
}
export interface BasicLink {
  id: string;
  type: string;
  name: string;
}
export interface EntityTypeMap {
  TypedContext: TypedContext;
}
export type EntityType = keyof EntityTypeMap;
export type EntityData<TEntityType extends EntityType = EntityType> =
  EntityTypeMap[TEntityType];
export interface TypedContextSubtypeMap {
  TypedContext: TypedContext;
}
export type TypedContextSubtype = keyof TypedContextSubtypeMap;
export function getAttributeConfigurations() {
  return [
    {
      name: "fend",
      label: "Frame end",
      entityType: "task",
      default: 1,
      objectType: "Shot",
      isHierarchical: false,
    },
    {
      name: "handles",
      label: "Frame handles",
      entityType: "task",
      default: 0,
      objectType: "Shot",
      isHierarchical: false,
    },
    {
      name: "duration",
      label: "Frame duration",
      entityType: "task",
      default: "{self.fend - self.fstart + 1}",
      objectType: "Shot",
      isHierarchical: false,
    },
    {
      name: "fstart",
      label: "Frame start",
      entityType: "task",
      default: 1,
      objectType: "Shot",
      isHierarchical: false,
    },
    {
      name: "fps",
      label: "fps",
      entityType: "show",
      default: 24,
      objectType: undefined,
      isHierarchical: false,
    },
    {
      name: "fps",
      label: "fps",
      entityType: "task",
      default: 25,
      objectType: "Sequence",
      isHierarchical: false,
    },
    {
      name: "fps",
      label: "fps",
      entityType: "task",
      default: 25,
      objectType: "Shot",
      isHierarchical: false,
    },
  ] as const;
}

export type CustomAttributeConfiguration = ReturnType<
  typeof getAttributeConfigurations
>[number];
export type CustomAttributeConfigurationName =
  CustomAttributeConfiguration["name"];
export type CustomAttributeConfigurationLabel =
  CustomAttributeConfiguration["label"];

export function getTypes() {
  return [
    {
      name: "Concept Art",
      isBillable: true,
    },
    {
      name: "Modeling",
      isBillable: true,
    },
    {
      name: "Rigging",
      isBillable: true,
    },
    {
      name: "Texture",
      isBillable: true,
    },
    {
      name: "Lookdev",
      isBillable: true,
    },
    {
      name: "Character",
      isBillable: true,
    },
    {
      name: "Prop",
      isBillable: true,
    },
    {
      name: "Furniture",
      isBillable: false,
    },
    {
      name: "Vehicle",
      isBillable: true,
    },
    {
      name: "Environment",
      isBillable: true,
    },
    {
      name: "Matte Painting",
      isBillable: true,
    },
    {
      name: "Production",
      isBillable: false,
    },
    {
      name: "Editing",
      isBillable: true,
    },
    {
      name: "Conform",
      isBillable: true,
    },
    {
      name: "Tracking",
      isBillable: true,
    },
    {
      name: "Rotoscoping",
      isBillable: true,
    },
    {
      name: "Previz",
      isBillable: true,
    },
    {
      name: "Layout",
      isBillable: true,
    },
    {
      name: "Animation",
      isBillable: true,
    },
    {
      name: "FX",
      isBillable: true,
    },
    {
      name: "Lighting",
      isBillable: true,
    },
    {
      name: "Rendering",
      isBillable: true,
    },
    {
      name: "Compositing",
      isBillable: true,
    },
    {
      name: "Deliverable",
      isBillable: true,
    },
  ] as const;
}

export type Type = ReturnType<typeof getTypes>[number];
export type TypeName = Type["name"];

export function getObjectTypes() {
  return [
    {
      name: "Folder",
      isTimeReportable: false,
      isTaskable: true,
      isTypeable: false,
      isStatusable: false,
      isSchedulable: false,
      isPrioritizable: true,
      isLeaf: false,
    },
    {
      name: "Asset Build",
      isTimeReportable: false,
      isTaskable: true,
      isTypeable: true,
      isStatusable: true,
      isSchedulable: false,
      isPrioritizable: true,
      isLeaf: false,
    },
    {
      name: "Episode",
      isTimeReportable: false,
      isTaskable: true,
      isTypeable: false,
      isStatusable: true,
      isSchedulable: false,
      isPrioritizable: true,
      isLeaf: false,
    },
    {
      name: "Scene",
      isTimeReportable: false,
      isTaskable: true,
      isTypeable: false,
      isStatusable: true,
      isSchedulable: false,
      isPrioritizable: false,
      isLeaf: false,
    },
    {
      name: "Sequence",
      isTimeReportable: false,
      isTaskable: true,
      isTypeable: false,
      isStatusable: false,
      isSchedulable: false,
      isPrioritizable: true,
      isLeaf: false,
    },
    {
      name: "Shot",
      isTimeReportable: false,
      isTaskable: true,
      isTypeable: false,
      isStatusable: true,
      isSchedulable: false,
      isPrioritizable: true,
      isLeaf: false,
    },
    {
      name: "Milestone",
      isTimeReportable: false,
      isTaskable: false,
      isTypeable: true,
      isStatusable: true,
      isSchedulable: true,
      isPrioritizable: true,
      isLeaf: true,
    },
    {
      name: "Task",
      isTimeReportable: true,
      isTaskable: false,
      isTypeable: true,
      isStatusable: true,
      isSchedulable: true,
      isPrioritizable: true,
      isLeaf: true,
    },
    {
      name: "Image",
      isTimeReportable: false,
      isTaskable: true,
      isTypeable: false,
      isStatusable: false,
      isSchedulable: false,
      isPrioritizable: false,
      isLeaf: false,
    },
    {
      name: "Information",
      isTimeReportable: false,
      isTaskable: true,
      isTypeable: false,
      isStatusable: false,
      isSchedulable: false,
      isPrioritizable: false,
      isLeaf: false,
    },
  ] as const;
}

export type ObjectType = ReturnType<typeof getObjectTypes>[number];
export type ObjectTypeName = ObjectType["name"];

export function getProjectSchemas() {
  return [
    {
      name: "Model production",
      objectTypes: ["Milestone", "Task", "Folder", "Asset Build"],
    },
    {
      name: "Animation",
      objectTypes: [
        "Milestone",
        "Task",
        "Episode",
        "Folder",
        "Asset Build",
        "Shot",
        "Sequence",
      ],
    },
    {
      name: "VFX",
      objectTypes: [
        "Milestone",
        "Task",
        "Episode",
        "Folder",
        "Asset Build",
        "Shot",
        "Sequence",
      ],
    },
    {
      name: "Media production",
      objectTypes: [
        "Milestone",
        "Task",
        "Scene",
        "Folder",
        "Image",
        "Asset Build",
        "Shot",
        "Information",
      ],
    },
  ] as const;
}

export type ProjectSchema = ReturnType<typeof getProjectSchemas>[number];
export type ProjectName = ProjectSchema["name"];

// Errors:
